{"title":"Support Vector Machines","markdown":{"yaml":{"title":"Support Vector Machines"},"headingText":"Load in some digit image data","containsRefs":false,"markdown":"\n\n\n\n\nIn this section, we will use what we learned about fitting models and apply it to a very useful machine-learning algorithm.\n\nFirst let's start with imports.\n\n\n\n\nOne of the canonical datasets in sklearn is a series of images of handwritten digits. We've imported the datasets above, but now lets load it.\n\nNot super helpful unless you're very good at reading python dictionary notation. Fortunately, one of the entries in this dataset is a description. Let's read that.\n\n\n#### Extract one of the digits to inspect\n\nNow that we're oriented, also look at one particular image of a digit, just so you know what it actually looks like. Below, we print just the first (index = 0) numeral of the 5620 they provide.\n\n\nNotice also in the dataset that there is a 'targets' attribute in the dataset. This is the correct numeral that we are trying to make the model predict.\n\n\nOur task now is to train a model that inputs the digit images and predicts the digit numeral. For this, we're going to use SVM, as discussed in lecture.\n\n#### Import SVM and create a new (unfitted) model with it.\n\nFor now, the parameters are going to be manually set (gamme) but we'll address how to choose them later. Here, I want to illustrate the basic approach used in sklearn to Load, train, fit and predict the model\n\nAt this point, classifier is not yet \"trained\", ie. not yet fit to the model. All ML algorithms in SKLEARN have a .fit() method, which we will use here, passing it the images and the targets.\n\nBefore we train it, we want to split the data into testing and training splits.\n\nClass question: Remind me WHY are we splitting it here? What is the bad thing that would happen if we just trained it on all of them?\n\nBefore we can even split the data, however, we need to reshape it to be in the way the regression model expects.\n\nIn particular, the SVM model needs a 1-dimensional, 64 element array. BUT, the input digits we saw were 2-dimensional, 8 by 8 arrays.\n\nThis actually leads to a somewhat mind-blown example of how computers \"think\" differently than we do. We clearly think about a numeral in 2 dimensional space, but here we see that the computer doesn't are about the spatial relationship ship at all. It sees each individual pixel as it's own \"Feature\" to use the classification parlance. You could even reshuffle the order of those 64 digits and as long as you kept it consistent across the data, it would result in identical predictions.\n\nLater on, we will talk about machine learning techniques that leverage rather than ignore this 2 dimensional, spatial nature of the data.\n\nFor now, let's just look at the data again. Rather than print it out, I really just want the shape\nso that i don't get inundated with text.\n\n#### Fit the  model\n\n Finally, now that we've split it, we can call the classifier's fit method which takes the TRAINING data as input.\n\nNow, our classifier object has it's internal parameters fit so that when we give it new input, it predicts what it thinks the correct classification is.\n\n#### Plot some results\n\nLet's plot a few of them in nicer format. Don't worry about learning the plotting code but it's a useful example to show the power.\n\n#### Confusion matrix\n\nA more convenient way of looking at the results is t the confusion matrix. This is a built in metric for sklearn. It plots the predicted labels vs. the true labels.\n\n\n**QUESTION:** Which digit was hardest to categorize and what was it most frequently confused as?\n","srcMarkdownNoYaml":"\n\n\n\n\nIn this section, we will use what we learned about fitting models and apply it to a very useful machine-learning algorithm.\n\nFirst let's start with imports.\n\n\n\n#### Load in some digit image data\n\nOne of the canonical datasets in sklearn is a series of images of handwritten digits. We've imported the datasets above, but now lets load it.\n\nNot super helpful unless you're very good at reading python dictionary notation. Fortunately, one of the entries in this dataset is a description. Let's read that.\n\n\n#### Extract one of the digits to inspect\n\nNow that we're oriented, also look at one particular image of a digit, just so you know what it actually looks like. Below, we print just the first (index = 0) numeral of the 5620 they provide.\n\n\nNotice also in the dataset that there is a 'targets' attribute in the dataset. This is the correct numeral that we are trying to make the model predict.\n\n\nOur task now is to train a model that inputs the digit images and predicts the digit numeral. For this, we're going to use SVM, as discussed in lecture.\n\n#### Import SVM and create a new (unfitted) model with it.\n\nFor now, the parameters are going to be manually set (gamme) but we'll address how to choose them later. Here, I want to illustrate the basic approach used in sklearn to Load, train, fit and predict the model\n\nAt this point, classifier is not yet \"trained\", ie. not yet fit to the model. All ML algorithms in SKLEARN have a .fit() method, which we will use here, passing it the images and the targets.\n\nBefore we train it, we want to split the data into testing and training splits.\n\nClass question: Remind me WHY are we splitting it here? What is the bad thing that would happen if we just trained it on all of them?\n\nBefore we can even split the data, however, we need to reshape it to be in the way the regression model expects.\n\nIn particular, the SVM model needs a 1-dimensional, 64 element array. BUT, the input digits we saw were 2-dimensional, 8 by 8 arrays.\n\nThis actually leads to a somewhat mind-blown example of how computers \"think\" differently than we do. We clearly think about a numeral in 2 dimensional space, but here we see that the computer doesn't are about the spatial relationship ship at all. It sees each individual pixel as it's own \"Feature\" to use the classification parlance. You could even reshuffle the order of those 64 digits and as long as you kept it consistent across the data, it would result in identical predictions.\n\nLater on, we will talk about machine learning techniques that leverage rather than ignore this 2 dimensional, spatial nature of the data.\n\nFor now, let's just look at the data again. Rather than print it out, I really just want the shape\nso that i don't get inundated with text.\n\n#### Fit the  model\n\n Finally, now that we've split it, we can call the classifier's fit method which takes the TRAINING data as input.\n\nNow, our classifier object has it's internal parameters fit so that when we give it new input, it predicts what it thinks the correct classification is.\n\n#### Plot some results\n\nLet's plot a few of them in nicer format. Don't worry about learning the plotting code but it's a useful example to show the power.\n\n#### Confusion matrix\n\nA more convenient way of looking at the results is t the confusion matrix. This is a built in metric for sklearn. It plots the predicted labels vs. the true labels.\n\n\n**QUESTION:** Which digit was hardest to categorize and what was it most frequently confused as?\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"support_vector_machines.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","bibliography":["../references.bib"],"theme":"cosmo","title":"Support Vector Machines"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}